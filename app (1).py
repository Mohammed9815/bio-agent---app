
import streamlit as st
import pandas as pd
from io import BytesIO
from datetime import datetime
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
import base64

st.set_page_config(page_title="ุงููููู ุงูุฐูู ููุงุฏุฉ ุงูุฃุญูุงุก", layout="centered", page_icon="๐งฌ")

# ------------------ ูุงุฌูุฉ ุงููุณุชุฎุฏู ------------------ #
st.markdown("<h1 style='text-align: center; color: #4CAF50;'>๐งฌ ุงููููู ุงูุฐูู ููุงุฏุฉ ุงูุฃุญูุงุก</h1>", unsafe_allow_html=True)
st.markdown("<h4 style='text-align: center;'>๐ฏ ุชูููุฏ ุฃูุดุทุฉ ูุฎุตุตุฉ ููุทูุงุจ ุญุณุจ ุฏุฑุฌุงุชูู</h4>", unsafe_allow_html=True)
st.markdown("---")

# ------------------ ุชุญููู ุจูุงูุงุช ุงูุทูุงุจ ------------------ #
st.subheader("๐ฅ ุฃููุงู: ุจูุงูุงุช ุงูุทูุงุจ")
input_method = st.radio("ููู ุชูุฏ ุฅุฏุฎุงู ุจูุงูุงุช ุงูุทูุงุจุ", ["๐ ุฑูุน ููู Excel", "โ๏ธ ุฅุฏุฎุงู ูุฏูู"], horizontal=True)

df = pd.DataFrame()

if input_method == "๐ ุฑูุน ููู Excel":
    uploaded_file = st.file_uploader("๐ผ ุงุฑูุน ููู Excel ูุญุชูู ุนูู ุนููุฏูู: ุงูุงุณู - ุงูุฏุฑุฌุฉ", type=["xlsx"])
    if uploaded_file:
        df = pd.read_excel(uploaded_file)
else:
    num_students = st.number_input("๐ ูู ุนุฏุฏ ุงูุทูุงุจุ", min_value=1, max_value=100, step=1)
    names = []
    scores = []
    for i in range(num_students):
        col1, col2 = st.columns([2, 1])
        with col1:
            name = st.text_input(f"ุงุณู ุงูุทุงูุจ ุฑูู {i+1}")
        with col2:
            score = st.number_input(f"ุฏุฑุฌุฉ {name or f'ุทุงูุจ {i+1}'}", min_value=0.0, max_value=10.0, step=0.1, key=f"score_{i}")
        if name:
            names.append(name)
            scores.append(score)
    if names:
        df = pd.DataFrame({"ุงูุงุณู": names, "ุงูุฏุฑุฌุฉ": scores})

# ------------------ ุงุฎุชูุงุฑ ุงูุฏุฑุณ ------------------ #
st.subheader("๐ ุซุงููุงู: ุงุฎุชุฑ ุงูุฏุฑุณ")
lessons = [
    "ุงูุฃุบุดูุฉ ุงูุฎูููุฉ ูุงูููู ุนุจุฑูุง", "ุงูุฅูุชุดุงุฑ ูุงูููู ุงููุดุท", "ุงูุฎุงุตูุฉ ุงูุฃุณููุฒูุฉ ูุฌูุฏ ุงููุงุก",
    "ุงูููู ูู ุงููุจุงุชุงุช", "ุงูููู ูู ุงูุซุฏููุงุช", "ุชุจุงุฏู ุงูุบุงุฒุงุช", "ุงูุฌูุงุฒ ุงูุฏูุฑู", 
    "ุงูุฏูุฑุฉ ุงูููุจูุฉ", "ุงูุฃูุนูุฉ ุงูุฏูููุฉ", "ููููุงุช ุงูุฏู", "ุงูุชููุณ ุงูุฎููู", "ุงูุฌูุงุฒ ุงูุชููุณู"
]
selected_lesson = st.selectbox("ุงุฎุชุฑ ุฃุญุฏ ุงูุฏุฑูุณ:", lessons)

# ------------------ ุชูููุฏ ุงููุดุงุท ุญุณุจ ุงูุชุตููู ------------------ #
def generate_activity(name, score, lesson):
    if score < 5:
        level = "ุนูุงุฌู ๐"
        activity = f"๐น ุนุฒูุฒู {name}ุ ุชุญุชุงุฌ ุฅูู ุฏุนู ูู ูุฐุง ุงูุฏุฑุณ.\nุงุจุฏุฃ ุจุงูุฅุฌุงุจุฉ ุนูู:\n1. ูุง ุงูููุตูุฏ ุจู {lesson}ุ\n2. ููุงุฐุง ูุฐุง ุงูููููู ูููุ\n3. ุฃุนุทูู ูุซุงูุงู ุจุณูุทุงู ุนููู."
    elif 5 <= score < 8:
        level = "ุฏุนู ๐ช"
        activity = f"๐ธ ูุฑุญุจูุง {name}!\nุฑุงุฌุน ุงูููุงุฑุงุช ุงูุชุงููุฉ:\n1. ูุฎุต ุงูููุงุท ุงูุฃุณุงุณูุฉ ูู {lesson}.\n2. ุงุดุฑุญูุง ูุฒูููู.\n3. ุงุฐูุฑ ุชุทุจููุงู ุนูููุงู."
    else:
        level = "ุฅุซุฑุงุฆู ๐"
        activity = f"๐ ููุชุงุฒ ูุง {name}!\nูุดุงุท ุฅุซุฑุงุฆู:\n1. ุงุจุญุซ ุนู ุชุทุจูู ูุงูุนู ูู {lesson}.\n2. ูุงูุด ูุงุฆุฏุชู.\n3. ุตูู ุณุคุงูุงู ุฅุจุฏุงุนูุงู ุญููู."
    return level, activity

# ------------------ ุชูููุฏ PDF ------------------ #
def create_pdf(name, level, activity):
    buffer = BytesIO()
    c = canvas.Canvas(buffer, pagesize=A4)
    width, height = A4
    c.setFont("Helvetica-Bold", 16)
    c.drawString(100, height - 80, f"ุงููููู ุงูุฐูู ููุงุฏุฉ ุงูุฃุญูุงุก ๐งฌ")
    c.setFont("Helvetica", 12)
    c.drawString(100, height - 120, f"ุงุณู ุงูุทุงูุจ: {name}")
    c.drawString(100, height - 140, f"ุงูุชุตููู: {level}")
    text = c.beginText(100, height - 180)
    for line in activity.split("\n"):
        text.textLine(line)
    c.drawText(text)
    c.showPage()
    c.save()
    buffer.seek(0)
    return buffer

# ------------------ ุฒุฑ ุชูููุฏ ุงูุฃูุดุทุฉ ------------------ #
if not df.empty and selected_lesson:
    st.subheader("โจ ุงูุฃูุดุทุฉ ุงูููุชุฑุญุฉ:")
    all_pdfs = []
    for i, row in df.iterrows():
        name = row['ุงูุงุณู']
        score = row['ุงูุฏุฑุฌุฉ']
        level, activity = generate_activity(name, score, selected_lesson)
        st.markdown(f"**๐ค {name}** โ {level}")
        st.code(activity, language="markdown")
        pdf_file = create_pdf(name, level, activity)
        all_pdfs.append((name, pdf_file))

    # ุชุญููู ุงููููุงุช ุจุดูู ูุถุบูุท
    st.markdown("---")
    if st.button("๐ฅ ุชุญููู ูููุงุช PDF ูุฌููุน ุงูุทูุงุจ"):
        zip_buffer = BytesIO()
        from zipfile import ZipFile
        with ZipFile(zip_buffer, "w") as zipf:
            for name, pdf in all_pdfs:
                zipf.writestr(f"{name}.pdf", pdf.read())
        zip_buffer.seek(0)
        b64 = base64.b64encode(zip_buffer.read()).decode()
        href = f'<a href="data:application/zip;base64,{b64}" download="ุฃูุดุทุฉ_{selected_lesson}.zip">๐ ุงุถุบุท ููุง ูุชูุฒูู ุฌููุน ุงูุฃูุดุทุฉ ุจุตูุบุฉ ZIP</a>'
        st.markdown(href, unsafe_allow_html=True)
